{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ArxLang Arx is multi-purpose compiler that aims to provide arrow datatypes as native datatypes. For now, it is strongly based on the Kaleidoscope compiler with a just few changes. Arx Enhancement Proposals Any change to the language (syntax) should be done using a Enhancement Proposal via https://github.com/arxlang/arx-proposals repository.","title":"Home"},{"location":"#arxlang","text":"Arx is multi-purpose compiler that aims to provide arrow datatypes as native datatypes. For now, it is strongly based on the Kaleidoscope compiler with a just few changes.","title":"ArxLang"},{"location":"#arx-enhancement-proposals","text":"Any change to the language (syntax) should be done using a Enhancement Proposal via https://github.com/arxlang/arx-proposals repository.","title":"Arx Enhancement Proposals"},{"location":"changelog/","text":"Release Notes 0.1.1 (2023-06-26) Bug Fixes Change package name to arxlang ( #2 ) ( e30c937 ) Fix semantic release configuration ( #5 ) ( 78ca1df ) Fix the documentation issues ( #3 ) ( 9ec65a3 ) Fix the semantic release workflow ( #4 ) ( b5fb75c )","title":"Changelog"},{"location":"changelog/#release-notes","text":"","title":"Release Notes"},{"location":"changelog/#011-2023-06-26","text":"","title":"0.1.1 (2023-06-26)"},{"location":"changelog/#bug-fixes","text":"Change package name to arxlang ( #2 ) ( e30c937 ) Fix semantic release configuration ( #5 ) ( 78ca1df ) Fix the documentation issues ( #3 ) ( 9ec65a3 ) Fix the semantic release workflow ( #4 ) ( b5fb75c )","title":"Bug Fixes"},{"location":"coc/","text":"Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at arxcompiler@gmail.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"coc/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"coc/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"coc/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"coc/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"coc/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"coc/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at arxcompiler@gmail.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"coc/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"coc/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"coc/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"coc/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"coc/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"coc/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"contributing/","text":"Contributing In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout , which means that the package code is located at ./src/arx . For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/ Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions Report Bugs Report bugs at https://github.com/arxlang/arx/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it. Implement Features Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it. Write Documentation Arx could always use more documentation, whether as part of the official Arx docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback The best way to send feedback is to file an issue at https://github.com/arxlang/arx/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! Ready to contribute? Here\u2019s how to set up arx for local development. Fork the arx repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/arx.git $ cd arx Create the conda environment (using mamba or conda) and install the project: $ mamba env create --file conda/dev.yaml $ conda activate arx $ poetry install Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you\u2019re done making changes, check that your changes pass the linter and the tests: $ makim tests.linter $ makim tests.unittest Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python >= 3.8.1. Tips To run a subset of tests: $ pytest tests/test_io.py Release This project uses semantic-release in order to cut a new release based on the commit-message. Commit message format semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release. By default, semantic-release uses Angular Commit Message Conventions . The commit message format can be changed with the preset or config options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins. Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages. The table below shows which commit message gets you which release type when semantic-release runs (using the default configuration): Commit message Release type fix(pencil): stop graphite breaking when pressure is applied Fix Release feat(pencil): add 'graphiteWidth' option Feature Release perf(pencil): remove graphiteWidth option Chore fix(pencil)!: The graphiteWidth option has been removed Breaking Release source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format As this project uses the squash and merge strategy, ensure to apply the commit message format to the PR's title.","title":"Contributing Guide"},{"location":"contributing/#contributing","text":"In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout , which means that the package code is located at ./src/arx . For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/ Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/arxlang/arx/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Arx could always use more documentation, whether as part of the official Arx docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/arxlang/arx/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here\u2019s how to set up arx for local development. Fork the arx repo on GitHub. Clone your fork locally: $ git clone git@github.com:your_name_here/arx.git $ cd arx Create the conda environment (using mamba or conda) and install the project: $ mamba env create --file conda/dev.yaml $ conda activate arx $ poetry install Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you\u2019re done making changes, check that your changes pass the linter and the tests: $ makim tests.linter $ makim tests.unittest Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python >= 3.8.1.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests: $ pytest tests/test_io.py","title":"Tips"},{"location":"contributing/#release","text":"This project uses semantic-release in order to cut a new release based on the commit-message.","title":"Release"},{"location":"contributing/#commit-message-format","text":"semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release. By default, semantic-release uses Angular Commit Message Conventions . The commit message format can be changed with the preset or config options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins. Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages. The table below shows which commit message gets you which release type when semantic-release runs (using the default configuration): Commit message Release type fix(pencil): stop graphite breaking when pressure is applied Fix Release feat(pencil): add 'graphiteWidth' option Feature Release perf(pencil): remove graphiteWidth option Chore fix(pencil)!: The graphiteWidth option has been removed Breaking Release source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format As this project uses the squash and merge strategy, ensure to apply the commit message format to the PR's title.","title":"Commit message format"},{"location":"discord/","text":"window.location.href = \"https://discord.gg/CjSr6GNgp7\";","title":"Discord"},{"location":"governance/","text":"Governance The objectives of this document include formalizing the governance of the ArxLang (Arx) project. In both common and uncommon situations, outlining the decision-making procedure and the interactions between the various members of our community, including the relationship between work that may be supported by for-profit or nonprofit organizations and open source collaborative development. Summary Arx is a community-owned and community-run project. To the maximum extent possible, decisions about project direction are made by community consensus (but note that \"consensus\" here has a somewhat technical meaning that might not match everyone's expectations -- see below). Some members of the community additionally contribute by serving on the Arx, where they are responsible for facilitating the establishment of community consensus, for stewarding project resources, and -- in extreme cases -- for making project decisions if the normal community-based process breaks down. The project ArxLang (Arx) community aims to create an open source compiler with a syntax that inherits elements from Python, C++, YAML, etc. An important aspect to Arx is that it aims to have Apache Arrow datatypes as native types. The Project is conducted by a distributed team of contributors, who are individuals that have collaborated with code, documentation, graphical design or other kind of work to the Project. Anyone can be a Contributor. Contributors can be affiliated with any legal entity or none. Contributors participate in the project by submitting, reviewing and discussing GitHub pull requests and issues and participating in open and public Project discussions on GitHub, discord, among other channels. The basis of project participation is openness and transparency. The Project Community consists of all Contributors and Users of the Project. Contributors work on behalf of and are responsible to the larger Project Community and we strive to keep the barrier between Contributors and Users as low as possible. In order to improve transparency and a better fiscal workflow, Arx is currently looking for a fiscal sponsor to help our project to grow. Governance This section describes the governance and leadership model of The Project. The principles of Project governance are: Openness & Transparency Active Contribution Institutional Neutrality Diversity, Equity and Inclusion Education Consensus-based decision making by the community In general, all project decisions will be made by consensus of all interested Contributors. The primary goal of this approach is to ensure that the people who are most affected by and involved in any given change can contribute their knowledge in the confidence that their voices will be heard, because thoughtful review from a broad community is the best mechanism we know of for creating high-quality software. The mechanism we use to accomplish this goal may be unfamiliar for those who are not experienced with the cultural norms around free/open-source software development. We provide a summary here, and highly recommend that all Contributors additionally read Chapter 4: Social and Political Infrastructure of Karl Fogel's classic Producing Open Source Software, and in particular the section on Consensus-based Democracy, for a more detailed discussion. In this context, consensus does NOT require: that we wait to solicit everybody's opinion on every change, that we ever hold a vote on anything, or that everybody is happy or agrees with every decision. For us, what consensus means is that we entrust everyone with the right to veto any change if they feel it necessary. While this may sound like a recipe for obstruction and pain, this is not what happens. Instead, we find that most people take this responsibility seriously, and only invoke their veto when they judge that a serious problem is being ignored, and that their veto is necessary to protect the project. And in practice, it turns out that such vetoes are almost never formally invoked, because their mere possibility ensures that Contributors are motivated from the start to find some solution that everyone can live with -- thus accomplishing our goal of ensuring that all interested perspectives are taken into account. How do we know when consensus has been achieved? First of all, this is rather difficult since consensus is defined by the absence of vetoes, which requires us to somehow prove a negative. In practice, we use a combination of our best judgement (e.g., a simple and uncontroversial bug fix posted on GitHub and reviewed by a core developer is probably fine) and best efforts (e.g., all substantive API changes must be posted to a github issue or a discussion on discord in order to give the broader community a chance to catch any problems and suggest improvements; we assume that anyone who cares enough about Arx to invoke their veto right should be on the github Arx repositories or discord). Arx, is a small group, and aims for quick and transparent communication, so the common channels for communication are the github issues and the discord channels. So, all people involved can have a quick and transparent communication about any specific problem and we can react very quick. If one does need to invoke a formal veto, then the process should consist of: an unambiguous statement that a veto is being invoked, an explanation of why it is being invoked, and a description of what conditions (if any) would convince the vetoer to withdraw their veto. If all proposals for resolving some issue are vetoed, then the status quo wins by default. In the worst case, if a Contributor is genuinely misusing their veto obstructively to the detriment of the project, then they can be ejected from the project by consensus of the Steering Council -- see below. Steering Council The Project will have a Steering Council that consists of Project Contributors who have produced contributions that are substantial in quality and quantity, and sustained over at least one year. The overall role of the Council is to ensure, with input from the Community, the long-term well-being of the project, both technically and as a community. During the everyday project activities, council members participate in all discussions, code review and other project activities as peers with all other Contributors and the Community. In these everyday activities, Council Members do not have any special power or privilege through their membership on the Council. However, it is expected that because of the quality and quantity of their contributions and their expert knowledge of the Project Software and Services that Council Members will provide useful guidance, both technical and in terms of project direction, to potentially less experienced contributors. The Steering Council and its Members play a special role in certain situations. In particular, the Council may, if necessary: Make decisions about the overall scope, vision and direction of the project. Make decisions about strategic collaborations with other organizations or individuals. Make decisions about specific technical issues, features, bugs and pull requests. They are the primary mechanism of guiding the code review process and merging pull requests. Make decisions about the Services that are run by The Project and manage those Services for the benefit of the Project and Community. Update policy documents such as this one. Make decisions when regular community discussion doesn\u2019t produce consensus on an issue in a reasonable time frame. However, the Council's primary responsibility is to facilitate the ordinary community-based decision making procedure described above. If we ever have to step in and formally override the community for the health of the Project, then we will do so, but we will consider reaching this point to indicate a failure in our leadership. Council decision making If it becomes necessary for the Steering Council to produce a formal decision, then they will use a form of the Apache Foundation voting process. This is a formalized version of consensus, in which +1 votes indicate agreement, -1 votes are vetoes (and must be accompanied with a rationale, as above), and one can also vote fractionally (e.g. -0.5, +0.5) if one wishes to express an opinion without registering a full veto. These numeric votes are also often used informally as a way of getting a general sense of people's feelings on some issue, and should not normally be taken as formal votes. A formal vote only occurs if explicitly declared, and if this does occur then the vote should be held open for long enough to give all interested Council Members a chance to respond -- at least one week. In practice, we anticipate that for most Steering Council decisions (e.g., voting in new members) a more informal process will suffice. Council membership A list of current Steering Council Members is maintained at the page About. To become eligible to join the Steering Council, an individual must be a Project Contributor who has produced contributions that are substantial in quality and quantity, and sustained over at least six month. Potential Council Members are nominated by existing Council members, and become members following consensus of the existing Council members, and confirmation that the potential Member is interested and willing to serve in that capacity. The Council will be initially formed from the set of existing Core Developers who, as of late 2015, have been significantly active over the last year. When considering potential Members, the Council will look at candidates with a comprehensive view of their contributions. This will include but is not limited to code, code review, infrastructure work, mailing list and chat participation, community help/building, education and outreach, design work, etc. We are deliberately not setting arbitrary quantitative metrics (like \u201c100 commits in this repo\u201d) to avoid encouraging behavior that plays to the metrics rather than the project\u2019s overall well-being. We want to encourage a diverse array of backgrounds, viewpoints and talents in our team, which is why we explicitly do not define code as the sole metric on which council membership will be evaluated. If a Council member becomes inactive in the project for a period of six month, they will be considered for removal from the Council. Before removal, inactive Member will be approached to see if they plan on returning to active participation. If not they will be removed immediately upon a Council vote. If they plan on returning to active participation soon, they will be given a grace period of one month. If they don\u2019t return to active participation within that time period they will be removed by vote of the Council without further grace period. All former Council members can be considered for membership again at any time in the future, like any other Project Contributor. Retired Council members will be listed on the project website, acknowledging the period during which they were active in the Council. The Council reserves the right to eject current Members, if they are deemed to be actively harmful to the project\u2019s well-being, and attempts at communication and conflict resolution have failed. This requires the consensus of the remaining Members. Conflict of interest It is expected that the Council Members will be employed at a wide range of companies, universities and non-profit organizations. Because of this, it is possible that Members will have conflict of interests, such ones include, but are not limited to: Financial interests, such as investments, employment or contracting work, outside of The Project that may influence their work on The Project. Access to proprietary information of their employer that could potentially leak into their work with the Project. All members of the Council shall disclose to the rest of the Council any conflict of interest they may have. Members with a conflict of interest in a particular issue may participate in Council discussions on that issue, but must recuse themselves from voting on the issue. Private communications of the Council To the maximum extent possible, Council discussions and activities will be public and done in collaboration and discussion with the Project Contributors and Community. The Council will have a private channel on discord that will be used sparingly and only when a specific matter requires privacy. When private communications and decisions are needed, the Council will do its best to summarize those to the Community after eliding personal/private/sensitive information that should not be posted to the public internet. Subcommittees The Council can create subcommittees that provide leadership and guidance for specific aspects of the project. Like the Council as a whole, subcommittees should conduct their business in an open and public manner unless privacy is specifically called for. Private subcommittee communications should happen on the main private discord channel of the Council unless specifically called for. Institutional Partners and Funding The Steering Council are the primary leadership for the project. No outside institution, individual or legal entity has the ability to own, control, usurp or influence the project other than by participating in the Project as Contributors and Council Members. However, because institutions can be an important funding mechanism for the project, it is important to formally acknowledge institutional participation in the project. These are Institutional Partners. An Institutional Contributor is any individual Project Contributor who contributes to the project as part of their official duties at an Institutional Partner. Likewise, an Institutional Council Member is any Project Steering Council Member who contributes to the project as part of their official duties at an Institutional Partner. Institutions become eligible to become an Institutional Partner when they share same values of ArxLang and are available to collaborate to the project in any of these ways: publicizing ArxLang in their social network allocate one or more contributors to help ArxLang projects funding ArxLang general activities If at some point an existing Institutional Partner doesn't accomplish with these points mentioned above, then six month grace period begins. If at the end of this six months period they continue not to have any contribution, then their Institutional Partnership will lapse, and resuming it will require going through the normal process for new Partnerships. Funding acquired by Institutional Partners to work on The Project is called Institutional Funding. However, no funding obtained by an Institutional Partner can override the Steering Council. If a Partner has funding to do Open Science work and the Council decides to not pursue that work as a project, the Partner is free to pursue it on their own. However in this situation, that part of the Partner\u2019s work will not be under the ArxLang umbrella and cannot use the Project trademarks in a way that suggests a formal relationship. Institutional Partner benefits are: Acknowledgement on the ArxLang websites and in talks. Ability to influence the project through the participation of their Council Member. Council Members invited to ArxLang Developer Meetings. A list of current Institutional Partners is maintained at the page About Us. Document history arxlang/arx Acknowledgements Substantial portions of this document were adapted from the Open Science Labs project governance and decision-making document https://github.com/OpenScienceLabs/opensciencelabs.github.io/blob/main/pages/governance.md . Additionally, the Open Science Labs project governance is based on the Numpy project governance file: https://github.com/numpy/numpy/commits/main/doc/source/dev/governance/governance.rst . License CC BY-SA 4.0: https://creativecommons.org/licenses/by-sa/4.0/","title":"Governance"},{"location":"governance/#governance","text":"The objectives of this document include formalizing the governance of the ArxLang (Arx) project. In both common and uncommon situations, outlining the decision-making procedure and the interactions between the various members of our community, including the relationship between work that may be supported by for-profit or nonprofit organizations and open source collaborative development.","title":"Governance"},{"location":"governance/#summary","text":"Arx is a community-owned and community-run project. To the maximum extent possible, decisions about project direction are made by community consensus (but note that \"consensus\" here has a somewhat technical meaning that might not match everyone's expectations -- see below). Some members of the community additionally contribute by serving on the Arx, where they are responsible for facilitating the establishment of community consensus, for stewarding project resources, and -- in extreme cases -- for making project decisions if the normal community-based process breaks down.","title":"Summary"},{"location":"governance/#the-project","text":"ArxLang (Arx) community aims to create an open source compiler with a syntax that inherits elements from Python, C++, YAML, etc. An important aspect to Arx is that it aims to have Apache Arrow datatypes as native types. The Project is conducted by a distributed team of contributors, who are individuals that have collaborated with code, documentation, graphical design or other kind of work to the Project. Anyone can be a Contributor. Contributors can be affiliated with any legal entity or none. Contributors participate in the project by submitting, reviewing and discussing GitHub pull requests and issues and participating in open and public Project discussions on GitHub, discord, among other channels. The basis of project participation is openness and transparency. The Project Community consists of all Contributors and Users of the Project. Contributors work on behalf of and are responsible to the larger Project Community and we strive to keep the barrier between Contributors and Users as low as possible. In order to improve transparency and a better fiscal workflow, Arx is currently looking for a fiscal sponsor to help our project to grow.","title":"The project"},{"location":"governance/#governance_1","text":"This section describes the governance and leadership model of The Project. The principles of Project governance are: Openness & Transparency Active Contribution Institutional Neutrality Diversity, Equity and Inclusion Education","title":"Governance"},{"location":"governance/#consensus-based-decision-making-by-the-community","text":"In general, all project decisions will be made by consensus of all interested Contributors. The primary goal of this approach is to ensure that the people who are most affected by and involved in any given change can contribute their knowledge in the confidence that their voices will be heard, because thoughtful review from a broad community is the best mechanism we know of for creating high-quality software. The mechanism we use to accomplish this goal may be unfamiliar for those who are not experienced with the cultural norms around free/open-source software development. We provide a summary here, and highly recommend that all Contributors additionally read Chapter 4: Social and Political Infrastructure of Karl Fogel's classic Producing Open Source Software, and in particular the section on Consensus-based Democracy, for a more detailed discussion. In this context, consensus does NOT require: that we wait to solicit everybody's opinion on every change, that we ever hold a vote on anything, or that everybody is happy or agrees with every decision. For us, what consensus means is that we entrust everyone with the right to veto any change if they feel it necessary. While this may sound like a recipe for obstruction and pain, this is not what happens. Instead, we find that most people take this responsibility seriously, and only invoke their veto when they judge that a serious problem is being ignored, and that their veto is necessary to protect the project. And in practice, it turns out that such vetoes are almost never formally invoked, because their mere possibility ensures that Contributors are motivated from the start to find some solution that everyone can live with -- thus accomplishing our goal of ensuring that all interested perspectives are taken into account. How do we know when consensus has been achieved? First of all, this is rather difficult since consensus is defined by the absence of vetoes, which requires us to somehow prove a negative. In practice, we use a combination of our best judgement (e.g., a simple and uncontroversial bug fix posted on GitHub and reviewed by a core developer is probably fine) and best efforts (e.g., all substantive API changes must be posted to a github issue or a discussion on discord in order to give the broader community a chance to catch any problems and suggest improvements; we assume that anyone who cares enough about Arx to invoke their veto right should be on the github Arx repositories or discord). Arx, is a small group, and aims for quick and transparent communication, so the common channels for communication are the github issues and the discord channels. So, all people involved can have a quick and transparent communication about any specific problem and we can react very quick. If one does need to invoke a formal veto, then the process should consist of: an unambiguous statement that a veto is being invoked, an explanation of why it is being invoked, and a description of what conditions (if any) would convince the vetoer to withdraw their veto. If all proposals for resolving some issue are vetoed, then the status quo wins by default. In the worst case, if a Contributor is genuinely misusing their veto obstructively to the detriment of the project, then they can be ejected from the project by consensus of the Steering Council -- see below.","title":"Consensus-based decision making by the community"},{"location":"governance/#steering-council","text":"The Project will have a Steering Council that consists of Project Contributors who have produced contributions that are substantial in quality and quantity, and sustained over at least one year. The overall role of the Council is to ensure, with input from the Community, the long-term well-being of the project, both technically and as a community. During the everyday project activities, council members participate in all discussions, code review and other project activities as peers with all other Contributors and the Community. In these everyday activities, Council Members do not have any special power or privilege through their membership on the Council. However, it is expected that because of the quality and quantity of their contributions and their expert knowledge of the Project Software and Services that Council Members will provide useful guidance, both technical and in terms of project direction, to potentially less experienced contributors. The Steering Council and its Members play a special role in certain situations. In particular, the Council may, if necessary: Make decisions about the overall scope, vision and direction of the project. Make decisions about strategic collaborations with other organizations or individuals. Make decisions about specific technical issues, features, bugs and pull requests. They are the primary mechanism of guiding the code review process and merging pull requests. Make decisions about the Services that are run by The Project and manage those Services for the benefit of the Project and Community. Update policy documents such as this one. Make decisions when regular community discussion doesn\u2019t produce consensus on an issue in a reasonable time frame. However, the Council's primary responsibility is to facilitate the ordinary community-based decision making procedure described above. If we ever have to step in and formally override the community for the health of the Project, then we will do so, but we will consider reaching this point to indicate a failure in our leadership.","title":"Steering Council"},{"location":"governance/#council-decision-making","text":"If it becomes necessary for the Steering Council to produce a formal decision, then they will use a form of the Apache Foundation voting process. This is a formalized version of consensus, in which +1 votes indicate agreement, -1 votes are vetoes (and must be accompanied with a rationale, as above), and one can also vote fractionally (e.g. -0.5, +0.5) if one wishes to express an opinion without registering a full veto. These numeric votes are also often used informally as a way of getting a general sense of people's feelings on some issue, and should not normally be taken as formal votes. A formal vote only occurs if explicitly declared, and if this does occur then the vote should be held open for long enough to give all interested Council Members a chance to respond -- at least one week. In practice, we anticipate that for most Steering Council decisions (e.g., voting in new members) a more informal process will suffice.","title":"Council decision making"},{"location":"governance/#council-membership","text":"A list of current Steering Council Members is maintained at the page About. To become eligible to join the Steering Council, an individual must be a Project Contributor who has produced contributions that are substantial in quality and quantity, and sustained over at least six month. Potential Council Members are nominated by existing Council members, and become members following consensus of the existing Council members, and confirmation that the potential Member is interested and willing to serve in that capacity. The Council will be initially formed from the set of existing Core Developers who, as of late 2015, have been significantly active over the last year. When considering potential Members, the Council will look at candidates with a comprehensive view of their contributions. This will include but is not limited to code, code review, infrastructure work, mailing list and chat participation, community help/building, education and outreach, design work, etc. We are deliberately not setting arbitrary quantitative metrics (like \u201c100 commits in this repo\u201d) to avoid encouraging behavior that plays to the metrics rather than the project\u2019s overall well-being. We want to encourage a diverse array of backgrounds, viewpoints and talents in our team, which is why we explicitly do not define code as the sole metric on which council membership will be evaluated. If a Council member becomes inactive in the project for a period of six month, they will be considered for removal from the Council. Before removal, inactive Member will be approached to see if they plan on returning to active participation. If not they will be removed immediately upon a Council vote. If they plan on returning to active participation soon, they will be given a grace period of one month. If they don\u2019t return to active participation within that time period they will be removed by vote of the Council without further grace period. All former Council members can be considered for membership again at any time in the future, like any other Project Contributor. Retired Council members will be listed on the project website, acknowledging the period during which they were active in the Council. The Council reserves the right to eject current Members, if they are deemed to be actively harmful to the project\u2019s well-being, and attempts at communication and conflict resolution have failed. This requires the consensus of the remaining Members.","title":"Council membership"},{"location":"governance/#conflict-of-interest","text":"It is expected that the Council Members will be employed at a wide range of companies, universities and non-profit organizations. Because of this, it is possible that Members will have conflict of interests, such ones include, but are not limited to: Financial interests, such as investments, employment or contracting work, outside of The Project that may influence their work on The Project. Access to proprietary information of their employer that could potentially leak into their work with the Project. All members of the Council shall disclose to the rest of the Council any conflict of interest they may have. Members with a conflict of interest in a particular issue may participate in Council discussions on that issue, but must recuse themselves from voting on the issue.","title":"Conflict of interest"},{"location":"governance/#private-communications-of-the-council","text":"To the maximum extent possible, Council discussions and activities will be public and done in collaboration and discussion with the Project Contributors and Community. The Council will have a private channel on discord that will be used sparingly and only when a specific matter requires privacy. When private communications and decisions are needed, the Council will do its best to summarize those to the Community after eliding personal/private/sensitive information that should not be posted to the public internet.","title":"Private communications of the Council"},{"location":"governance/#subcommittees","text":"The Council can create subcommittees that provide leadership and guidance for specific aspects of the project. Like the Council as a whole, subcommittees should conduct their business in an open and public manner unless privacy is specifically called for. Private subcommittee communications should happen on the main private discord channel of the Council unless specifically called for.","title":"Subcommittees"},{"location":"governance/#institutional-partners-and-funding","text":"The Steering Council are the primary leadership for the project. No outside institution, individual or legal entity has the ability to own, control, usurp or influence the project other than by participating in the Project as Contributors and Council Members. However, because institutions can be an important funding mechanism for the project, it is important to formally acknowledge institutional participation in the project. These are Institutional Partners. An Institutional Contributor is any individual Project Contributor who contributes to the project as part of their official duties at an Institutional Partner. Likewise, an Institutional Council Member is any Project Steering Council Member who contributes to the project as part of their official duties at an Institutional Partner. Institutions become eligible to become an Institutional Partner when they share same values of ArxLang and are available to collaborate to the project in any of these ways: publicizing ArxLang in their social network allocate one or more contributors to help ArxLang projects funding ArxLang general activities If at some point an existing Institutional Partner doesn't accomplish with these points mentioned above, then six month grace period begins. If at the end of this six months period they continue not to have any contribution, then their Institutional Partnership will lapse, and resuming it will require going through the normal process for new Partnerships. Funding acquired by Institutional Partners to work on The Project is called Institutional Funding. However, no funding obtained by an Institutional Partner can override the Steering Council. If a Partner has funding to do Open Science work and the Council decides to not pursue that work as a project, the Partner is free to pursue it on their own. However in this situation, that part of the Partner\u2019s work will not be under the ArxLang umbrella and cannot use the Project trademarks in a way that suggests a formal relationship. Institutional Partner benefits are: Acknowledgement on the ArxLang websites and in talks. Ability to influence the project through the participation of their Council Member. Council Members invited to ArxLang Developer Meetings. A list of current Institutional Partners is maintained at the page About Us.","title":"Institutional Partners and Funding"},{"location":"governance/#document-history","text":"arxlang/arx","title":"Document history"},{"location":"governance/#acknowledgements","text":"Substantial portions of this document were adapted from the Open Science Labs project governance and decision-making document https://github.com/OpenScienceLabs/opensciencelabs.github.io/blob/main/pages/governance.md . Additionally, the Open Science Labs project governance is based on the Numpy project governance file: https://github.com/numpy/numpy/commits/main/doc/source/dev/governance/governance.rst .","title":"Acknowledgements"},{"location":"governance/#license","text":"CC BY-SA 4.0: https://creativecommons.org/licenses/by-sa/4.0/","title":"License"},{"location":"partners/","text":"Partners Open science labs is a community that aims to gather people from all parts of the world, specially from latin america countries and create an open space for teaching, learning and sharing topics around open science and computational tools. An english group is very important in this context because it increases the possibilities of collaboration in open projects.","title":"Partners"},{"location":"partners/#partners","text":"Open science labs is a community that aims to gather people from all parts of the world, specially from latin america countries and create an open space for teaching, learning and sharing topics around open science and computational tools. An english group is very important in this context because it increases the possibilities of collaboration in open projects.","title":"Partners"},{"location":"roadmap/","text":"Roadmap The roadmap document define the direction that the project is taking. The initial and decisive part of the project is the implementation of the Apache Arrow datatypes as the native datatypes. But in order to get to the point where we can implement that, we need first implement a bunch of small pieces to the compiler, in all the phases: lexer, parser, semantic analysis, and code generator. Improve the language structure Currently, almost everything is a expression, but some structure should be converted to statements. For loop If Implement return keyword Allow multiple lines in a block Add support for while loop Add support for switch Add support for code structure defined by indentation Add support packaging and import Add support for docstring Add support for file objects generation Add support for generating executable files Add support for mutable variables Add support for classes (details TBA) Data type support ArxLang is based on Kaleidoscope compiler , so it just implements float data type for now. In order to accept more datatypes, the language should have a way to specify the type for each variable and function returning. Wave 1: float32 Wave 2: static typing Wave 3: int8, int16, int32, int64 Wave 4: float16, float64 Wave 5: string Wave 6: datetime Implement Apache Arrow datatypes TBA","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"The roadmap document define the direction that the project is taking. The initial and decisive part of the project is the implementation of the Apache Arrow datatypes as the native datatypes. But in order to get to the point where we can implement that, we need first implement a bunch of small pieces to the compiler, in all the phases: lexer, parser, semantic analysis, and code generator.","title":"Roadmap"},{"location":"roadmap/#improve-the-language-structure","text":"Currently, almost everything is a expression, but some structure should be converted to statements. For loop If Implement return keyword Allow multiple lines in a block Add support for while loop Add support for switch Add support for code structure defined by indentation Add support packaging and import Add support for docstring Add support for file objects generation Add support for generating executable files Add support for mutable variables Add support for classes (details TBA)","title":"Improve the language structure"},{"location":"roadmap/#data-type-support","text":"ArxLang is based on Kaleidoscope compiler , so it just implements float data type for now. In order to accept more datatypes, the language should have a way to specify the type for each variable and function returning. Wave 1: float32 Wave 2: static typing Wave 3: int8, int16, int32, int64 Wave 4: float16, float64 Wave 5: string Wave 6: datetime","title":"Data type support"},{"location":"roadmap/#implement-apache-arrow-datatypes","text":"TBA","title":"Implement Apache Arrow datatypes"},{"location":"sponsor/","text":"Sponsor","title":"Sponsor"},{"location":"sponsor/#sponsor","text":"","title":"Sponsor"},{"location":"api/ast/","text":"AST ast AST classes and functions. Classes BinaryExprAST ( ExprAST ) AST class for the binary operator. Methods __init__ ( self , loc , op , lhs , rhs ) special Initialize the BinaryExprAST instance. CallExprAST ( ExprAST ) AST class for function call. Methods __init__ ( self , loc , callee , args ) special Initialize the CallExprAST instance. ExprAST AST main expression class. Methods __init__ ( self , loc =< arx . lexer . SourceLocation object at 0x7efe8d6d7250 > ) special Initialize the ExprAST instance. ExprKind ( Enum ) The expression kind class used for downcasting. FloatExprAST ( ExprAST ) AST for the literal float number. Methods __init__ ( self , val ) special Initialize the FloatAST instance. ForExprAST ( ExprAST ) AST class for For statement. Methods __init__ ( self , var_name , start , end , step , body ) special Initialize the ForExprAST instance. FunctionAST ( ExprAST ) AST class for function definition. Methods __init__ ( self , proto , body ) special Initialize the FunctionAST instance. IfExprAST ( ExprAST ) AST class for if statement. Methods __init__ ( self , loc , cond , then_ , else_ ) special Initialize the IfExprAST instance. PrototypeAST ( ExprAST ) AST class for function prototype declaration. Methods __init__ ( self , loc , name , type_name , args ) special Initialize the PrototypeAST instance. get_name ( self ) Return the prototype name. ReturnExprAST ( ExprAST ) AST class for function return statement. Methods __init__ ( self , expr ) special Initialize the ReturnExprAST instance. TreeAST ( ExprAST ) The AST tree. Methods __init__ ( self ) special Initialize the TreeAST instance. UnaryExprAST ( ExprAST ) AST class for the unary operator. Methods __init__ ( self , op_code , operand ) special Initialize the UnaryExprAST instance. VarExprAST ( ExprAST ) AST class for variable declaration. Methods __init__ ( self , var_names , type_name , body ) special Initialize the VarExprAST instance. VariableExprAST ( ExprAST ) AST class for the variable usage. Methods __init__ ( self , loc , name , type_name ) special Initialize the VariableExprAST instance. get_name ( self ) Return the variable name.","title":"AST"},{"location":"api/ast/#ast","text":"","title":"AST"},{"location":"api/ast/#arx.ast","text":"AST classes and functions.","title":"ast"},{"location":"api/ast/#arx.ast-classes","text":"","title":"Classes"},{"location":"api/ast/#arx.ast.BinaryExprAST","text":"AST class for the binary operator.","title":"BinaryExprAST"},{"location":"api/ast/#arx.ast.BinaryExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.BinaryExprAST.__init__","text":"Initialize the BinaryExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.CallExprAST","text":"AST class for function call.","title":"CallExprAST"},{"location":"api/ast/#arx.ast.CallExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.CallExprAST.__init__","text":"Initialize the CallExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.ExprAST","text":"AST main expression class.","title":"ExprAST"},{"location":"api/ast/#arx.ast.ExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.ExprAST.__init__","text":"Initialize the ExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.ExprKind","text":"The expression kind class used for downcasting.","title":"ExprKind"},{"location":"api/ast/#arx.ast.FloatExprAST","text":"AST for the literal float number.","title":"FloatExprAST"},{"location":"api/ast/#arx.ast.FloatExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.FloatExprAST.__init__","text":"Initialize the FloatAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.ForExprAST","text":"AST class for For statement.","title":"ForExprAST"},{"location":"api/ast/#arx.ast.ForExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.ForExprAST.__init__","text":"Initialize the ForExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.FunctionAST","text":"AST class for function definition.","title":"FunctionAST"},{"location":"api/ast/#arx.ast.FunctionAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.FunctionAST.__init__","text":"Initialize the FunctionAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.IfExprAST","text":"AST class for if statement.","title":"IfExprAST"},{"location":"api/ast/#arx.ast.IfExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.IfExprAST.__init__","text":"Initialize the IfExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.PrototypeAST","text":"AST class for function prototype declaration.","title":"PrototypeAST"},{"location":"api/ast/#arx.ast.PrototypeAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.PrototypeAST.__init__","text":"Initialize the PrototypeAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.PrototypeAST.get_name","text":"Return the prototype name.","title":"get_name()"},{"location":"api/ast/#arx.ast.ReturnExprAST","text":"AST class for function return statement.","title":"ReturnExprAST"},{"location":"api/ast/#arx.ast.ReturnExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.ReturnExprAST.__init__","text":"Initialize the ReturnExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.TreeAST","text":"The AST tree.","title":"TreeAST"},{"location":"api/ast/#arx.ast.TreeAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.TreeAST.__init__","text":"Initialize the TreeAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.UnaryExprAST","text":"AST class for the unary operator.","title":"UnaryExprAST"},{"location":"api/ast/#arx.ast.UnaryExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.UnaryExprAST.__init__","text":"Initialize the UnaryExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.VarExprAST","text":"AST class for variable declaration.","title":"VarExprAST"},{"location":"api/ast/#arx.ast.VarExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.VarExprAST.__init__","text":"Initialize the VarExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.VariableExprAST","text":"AST class for the variable usage.","title":"VariableExprAST"},{"location":"api/ast/#arx.ast.VariableExprAST-methods","text":"","title":"Methods"},{"location":"api/ast/#arx.ast.VariableExprAST.__init__","text":"Initialize the VariableExprAST instance.","title":"__init__()"},{"location":"api/ast/#arx.ast.VariableExprAST.get_name","text":"Return the variable name.","title":"get_name()"},{"location":"api/cli/","text":"CLI cli Functions and classes for handling the CLI call. Classes CustomHelpFormatter ( RawTextHelpFormatter ) Formatter for generating usage messages and argument help strings. Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail. Functions app () Run the application. get_args () Get the CLI arguments. show_version () Show the application version.","title":"CLI"},{"location":"api/cli/#cli","text":"","title":"CLI"},{"location":"api/cli/#arx.cli","text":"Functions and classes for handling the CLI call.","title":"cli"},{"location":"api/cli/#arx.cli-classes","text":"","title":"Classes"},{"location":"api/cli/#arx.cli.CustomHelpFormatter","text":"Formatter for generating usage messages and argument help strings. Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail.","title":"CustomHelpFormatter"},{"location":"api/cli/#arx.cli-functions","text":"","title":"Functions"},{"location":"api/cli/#arx.cli.app","text":"Run the application.","title":"app()"},{"location":"api/cli/#arx.cli.get_args","text":"Get the CLI arguments.","title":"get_args()"},{"location":"api/cli/#arx.cli.show_version","text":"Show the application version.","title":"show_version()"},{"location":"api/io/","text":"IO io Module for handling the IO used by the compiler. Classes ArxBuffer ArxBuffer gathers function for handle the system buffer. Methods __init__ ( self ) special Initialize ArxBuffer instance. clean ( self ) Clean the buffer content. read ( self ) Read the buffer content. write ( self , text ) Write the given text to the buffer. ArxFile ArxFile gathers function to handle files. Methods create_tmp_file ( content ) staticmethod Create a temporary file with the given content. Parameters: Name Type Description Default content str The content of the temporary file. required Returns: Type Description str The name of the created temporary file. delete_file ( filename ) staticmethod Delete the specified file. Parameters: Name Type Description Default filename str The name of the file to be deleted. required Returns: Type Description int Returns 0 on success, or -1 on failure. ArxIO Arx class for Input and Output operations. Methods file_to_buffer ( filename ) classmethod Copy the file content to the buffer. Parameters: Name Type Description Default filename str The name of the file to be copied to the buffer. required get_char () classmethod Get a char from the buffer or from the default input. Returns: Type Description str A char from the buffer. load_input_to_buffer () classmethod Load the content file or the standard input to the buffer. string_to_buffer ( value ) classmethod Copy the given string to the buffer. Parameters: Name Type Description Default value str The string to be copied to the buffer. required","title":"IO"},{"location":"api/io/#io","text":"","title":"IO"},{"location":"api/io/#arx.io","text":"Module for handling the IO used by the compiler.","title":"io"},{"location":"api/io/#arx.io-classes","text":"","title":"Classes"},{"location":"api/io/#arx.io.ArxBuffer","text":"ArxBuffer gathers function for handle the system buffer.","title":"ArxBuffer"},{"location":"api/io/#arx.io.ArxBuffer-methods","text":"","title":"Methods"},{"location":"api/io/#arx.io.ArxBuffer.__init__","text":"Initialize ArxBuffer instance.","title":"__init__()"},{"location":"api/io/#arx.io.ArxBuffer.clean","text":"Clean the buffer content.","title":"clean()"},{"location":"api/io/#arx.io.ArxBuffer.read","text":"Read the buffer content.","title":"read()"},{"location":"api/io/#arx.io.ArxBuffer.write","text":"Write the given text to the buffer.","title":"write()"},{"location":"api/io/#arx.io.ArxFile","text":"ArxFile gathers function to handle files.","title":"ArxFile"},{"location":"api/io/#arx.io.ArxFile-methods","text":"","title":"Methods"},{"location":"api/io/#arx.io.ArxFile.create_tmp_file","text":"Create a temporary file with the given content. Parameters: Name Type Description Default content str The content of the temporary file. required Returns: Type Description str The name of the created temporary file.","title":"create_tmp_file()"},{"location":"api/io/#arx.io.ArxFile.delete_file","text":"Delete the specified file. Parameters: Name Type Description Default filename str The name of the file to be deleted. required Returns: Type Description int Returns 0 on success, or -1 on failure.","title":"delete_file()"},{"location":"api/io/#arx.io.ArxIO","text":"Arx class for Input and Output operations.","title":"ArxIO"},{"location":"api/io/#arx.io.ArxIO-methods","text":"","title":"Methods"},{"location":"api/io/#arx.io.ArxIO.file_to_buffer","text":"Copy the file content to the buffer. Parameters: Name Type Description Default filename str The name of the file to be copied to the buffer. required","title":"file_to_buffer()"},{"location":"api/io/#arx.io.ArxIO.get_char","text":"Get a char from the buffer or from the default input. Returns: Type Description str A char from the buffer.","title":"get_char()"},{"location":"api/io/#arx.io.ArxIO.load_input_to_buffer","text":"Load the content file or the standard input to the buffer.","title":"load_input_to_buffer()"},{"location":"api/io/#arx.io.ArxIO.string_to_buffer","text":"Copy the given string to the buffer. Parameters: Name Type Description Default value str The string to be copied to the buffer. required","title":"string_to_buffer()"},{"location":"api/lexer/","text":"Lexical Analysis lexer Module for handling the lexer analysis. Classes Lexer Lexer class for tokenizing known variables. Attributes: Name Type Description cur_loc SourceLocation Current source location. cur_tok int Current token. lex_loc SourceLocation Source location for lexer. Methods advance () classmethod Advance the token from the buffer. Returns: Type Description str TokenKind in integer form. get_next_token () classmethod Provide a simple token buffer. Returns: Type Description Token The current token the parser is looking at. Reads another token from the lexer and updates cur_tok with its results. gettok () classmethod Get the next token. Returns: Type Description Token The next token from standard input. SourceLocation Represents the source location with line and column information. Attributes: Name Type Description line int Line number. col int Column number. Token dataclass Token class store the kind and the value of the token. Methods __str__ ( self ) special Display the token in a readable way. get_display_value ( self ) Return the string representation of a token value. Returns str : The string representation of the token value . get_name ( self ) Get the name of the specified token. Parameters: Name Type Description Default tok int TokenKind value. required Returns: Type Description str Name of the token. TokenKind ( Enum ) TokenKind enumeration for known variables returned by the lexer.","title":"Lexical Analysis"},{"location":"api/lexer/#lexical-analysis","text":"","title":"Lexical Analysis"},{"location":"api/lexer/#arx.lexer","text":"Module for handling the lexer analysis.","title":"lexer"},{"location":"api/lexer/#arx.lexer-classes","text":"","title":"Classes"},{"location":"api/lexer/#arx.lexer.Lexer","text":"Lexer class for tokenizing known variables. Attributes: Name Type Description cur_loc SourceLocation Current source location. cur_tok int Current token. lex_loc SourceLocation Source location for lexer.","title":"Lexer"},{"location":"api/lexer/#arx.lexer.Lexer-methods","text":"","title":"Methods"},{"location":"api/lexer/#arx.lexer.Lexer.advance","text":"Advance the token from the buffer. Returns: Type Description str TokenKind in integer form.","title":"advance()"},{"location":"api/lexer/#arx.lexer.Lexer.get_next_token","text":"Provide a simple token buffer. Returns: Type Description Token The current token the parser is looking at. Reads another token from the lexer and updates cur_tok with its results.","title":"get_next_token()"},{"location":"api/lexer/#arx.lexer.Lexer.gettok","text":"Get the next token. Returns: Type Description Token The next token from standard input.","title":"gettok()"},{"location":"api/lexer/#arx.lexer.SourceLocation","text":"Represents the source location with line and column information. Attributes: Name Type Description line int Line number. col int Column number.","title":"SourceLocation"},{"location":"api/lexer/#arx.lexer.Token","text":"Token class store the kind and the value of the token.","title":"Token"},{"location":"api/lexer/#arx.lexer.Token-methods","text":"","title":"Methods"},{"location":"api/lexer/#arx.lexer.Token.__str__","text":"Display the token in a readable way.","title":"__str__()"},{"location":"api/lexer/#arx.lexer.Token.get_display_value","text":"Return the string representation of a token value.","title":"get_display_value()"},{"location":"api/lexer/#arx.lexer.Token.get_display_value--returns","text":"str : The string representation of the token value .","title":"Returns"},{"location":"api/lexer/#arx.lexer.Token.get_name","text":"Get the name of the specified token. Parameters: Name Type Description Default tok int TokenKind value. required Returns: Type Description str Name of the token.","title":"get_name()"},{"location":"api/lexer/#arx.lexer.TokenKind","text":"TokenKind enumeration for known variables returned by the lexer.","title":"TokenKind"},{"location":"api/logs/","text":"Logs logs The logs functions and classes handle all the system messages. Functions LogError ( message ) LogError - A helper function for error handling. Parameters: Name Type Description Default message str The error message. required Returns: Type Description None Returns None as an error indicator. LogErrorV ( message ) LogError - A helper function for error handling. Parameters: Name Type Description Default message str The error message. required Returns: Type Description None Returns None as an error indicator.","title":"Logs"},{"location":"api/logs/#logs","text":"","title":"Logs"},{"location":"api/logs/#arx.logs","text":"The logs functions and classes handle all the system messages.","title":"logs"},{"location":"api/logs/#arx.logs-functions","text":"","title":"Functions"},{"location":"api/logs/#arx.logs.LogError","text":"LogError - A helper function for error handling. Parameters: Name Type Description Default message str The error message. required Returns: Type Description None Returns None as an error indicator.","title":"LogError()"},{"location":"api/logs/#arx.logs.LogErrorV","text":"LogError - A helper function for error handling. Parameters: Name Type Description Default message str The error message. required Returns: Type Description None Returns None as an error indicator.","title":"LogErrorV()"},{"location":"api/main/","text":"Main main Arx main module. Classes ArxMain The main class for calling Arx compiler. Methods compile ( self , show_llvm_ir = False ) Compile the given input file. run ( self , * args , ** kwargs ) Compile the given source code. run_shell ( self ) Open arx in shell mode. show_ast ( self ) Print the AST for the given input file. show_llvm_ir ( self ) Compile into LLVM IR the given input file.","title":"Main"},{"location":"api/main/#main","text":"","title":"Main"},{"location":"api/main/#arx.main","text":"Arx main module.","title":"main"},{"location":"api/main/#arx.main-classes","text":"","title":"Classes"},{"location":"api/main/#arx.main.ArxMain","text":"The main class for calling Arx compiler.","title":"ArxMain"},{"location":"api/main/#arx.main.ArxMain-methods","text":"","title":"Methods"},{"location":"api/main/#arx.main.ArxMain.compile","text":"Compile the given input file.","title":"compile()"},{"location":"api/main/#arx.main.ArxMain.run","text":"Compile the given source code.","title":"run()"},{"location":"api/main/#arx.main.ArxMain.run_shell","text":"Open arx in shell mode.","title":"run_shell()"},{"location":"api/main/#arx.main.ArxMain.show_ast","text":"Print the AST for the given input file.","title":"show_ast()"},{"location":"api/main/#arx.main.ArxMain.show_llvm_ir","text":"Compile into LLVM IR the given input file.","title":"show_llvm_ir()"},{"location":"api/parser/","text":"Syntactical Analysis parser parser module gather all functions and classes for parsing. Classes Parser Parser class. Methods get_tok_precedence () classmethod Get the precedence of the pending binary operator token. Returns: Type Description int The token precedence. parse () classmethod Parse the input code. Returns: Type Description TreeAST The parsed abstract syntax tree (AST), or None if parsing fails. parse_bin_op_rhs ( expr_prec , lhs ) classmethod Parse a binary expression. Parameters: Name Type Description Default expr_prec int Expression precedence (deprecated). required lhs ExprAST Left-hand side expression. required Returns: Type Description ExprAST The parsed binary expression, or None if parsing fails. parse_definition () classmethod Parse the function definition expression. Returns: Type Description FunctionAST The parsed function definition, or None if parsing fails. parse_expression () classmethod Parse an expression. Returns: Type Description ExprAST The parsed expression, or None if parsing fails. parse_extern () classmethod Parse the extern expression. Returns: Type Description PrototypeAST The parsed extern expression as a prototype, or None if parsing fails. parse_extern_prototype () classmethod Parse an extern prototype expression. Returns: Type Description PrototypeAST The parsed extern prototype, or None if parsing fails. parse_float_expr () classmethod Parse the number expression. Returns: Type Description FloatExprAST The parsed float expression. parse_for_expr () classmethod Parse the for expression. Returns: Type Description ForExprAST The parsed for expression, or None if parsing fails. parse_identifier_expr () classmethod Parse the identifier expression. Returns: Type Description ExprAST The parsed expression, or None if parsing fails. parse_if_expr () classmethod Parse the if expression. Returns: Type Description IfExprAST The parsed if expression, or None if parsing fails. parse_paren_expr () classmethod Parse the parenthesis expression. Returns: Type Description ExprAST The parsed expression. parse_primary () classmethod Parse the primary expression. Returns: Type Description ExprAST The parsed primary expression, or None if parsing fails. parse_prototype () classmethod Parse the prototype expression. Returns: Type Description PrototypeAST The parsed prototype, or None if parsing fails. parse_return_function () classmethod Parse the return expression. Returns: Type Description ReturnExprAST The parsed return expression, or None if parsing fails. parse_top_level_expr () classmethod Parse the top level expression. Returns: Type Description FunctionAST The parsed top level expression as a function, or None if parsing fails. parse_unary () classmethod Parse a unary expression. Returns: Type Description ExprAST The parsed unary expression, or None if parsing fails. parse_var_expr () classmethod Parse the var declaration expression. Returns: Type Description VarExprAST The parsed var expression, or None if parsing fails.","title":"Syntactical Analysis"},{"location":"api/parser/#syntactical-analysis","text":"","title":"Syntactical Analysis"},{"location":"api/parser/#arx.parser","text":"parser module gather all functions and classes for parsing.","title":"parser"},{"location":"api/parser/#arx.parser-classes","text":"","title":"Classes"},{"location":"api/parser/#arx.parser.Parser","text":"Parser class.","title":"Parser"},{"location":"api/parser/#arx.parser.Parser-methods","text":"","title":"Methods"},{"location":"api/parser/#arx.parser.Parser.get_tok_precedence","text":"Get the precedence of the pending binary operator token. Returns: Type Description int The token precedence.","title":"get_tok_precedence()"},{"location":"api/parser/#arx.parser.Parser.parse","text":"Parse the input code. Returns: Type Description TreeAST The parsed abstract syntax tree (AST), or None if parsing fails.","title":"parse()"},{"location":"api/parser/#arx.parser.Parser.parse_bin_op_rhs","text":"Parse a binary expression. Parameters: Name Type Description Default expr_prec int Expression precedence (deprecated). required lhs ExprAST Left-hand side expression. required Returns: Type Description ExprAST The parsed binary expression, or None if parsing fails.","title":"parse_bin_op_rhs()"},{"location":"api/parser/#arx.parser.Parser.parse_definition","text":"Parse the function definition expression. Returns: Type Description FunctionAST The parsed function definition, or None if parsing fails.","title":"parse_definition()"},{"location":"api/parser/#arx.parser.Parser.parse_expression","text":"Parse an expression. Returns: Type Description ExprAST The parsed expression, or None if parsing fails.","title":"parse_expression()"},{"location":"api/parser/#arx.parser.Parser.parse_extern","text":"Parse the extern expression. Returns: Type Description PrototypeAST The parsed extern expression as a prototype, or None if parsing fails.","title":"parse_extern()"},{"location":"api/parser/#arx.parser.Parser.parse_extern_prototype","text":"Parse an extern prototype expression. Returns: Type Description PrototypeAST The parsed extern prototype, or None if parsing fails.","title":"parse_extern_prototype()"},{"location":"api/parser/#arx.parser.Parser.parse_float_expr","text":"Parse the number expression. Returns: Type Description FloatExprAST The parsed float expression.","title":"parse_float_expr()"},{"location":"api/parser/#arx.parser.Parser.parse_for_expr","text":"Parse the for expression. Returns: Type Description ForExprAST The parsed for expression, or None if parsing fails.","title":"parse_for_expr()"},{"location":"api/parser/#arx.parser.Parser.parse_identifier_expr","text":"Parse the identifier expression. Returns: Type Description ExprAST The parsed expression, or None if parsing fails.","title":"parse_identifier_expr()"},{"location":"api/parser/#arx.parser.Parser.parse_if_expr","text":"Parse the if expression. Returns: Type Description IfExprAST The parsed if expression, or None if parsing fails.","title":"parse_if_expr()"},{"location":"api/parser/#arx.parser.Parser.parse_paren_expr","text":"Parse the parenthesis expression. Returns: Type Description ExprAST The parsed expression.","title":"parse_paren_expr()"},{"location":"api/parser/#arx.parser.Parser.parse_primary","text":"Parse the primary expression. Returns: Type Description ExprAST The parsed primary expression, or None if parsing fails.","title":"parse_primary()"},{"location":"api/parser/#arx.parser.Parser.parse_prototype","text":"Parse the prototype expression. Returns: Type Description PrototypeAST The parsed prototype, or None if parsing fails.","title":"parse_prototype()"},{"location":"api/parser/#arx.parser.Parser.parse_return_function","text":"Parse the return expression. Returns: Type Description ReturnExprAST The parsed return expression, or None if parsing fails.","title":"parse_return_function()"},{"location":"api/parser/#arx.parser.Parser.parse_top_level_expr","text":"Parse the top level expression. Returns: Type Description FunctionAST The parsed top level expression as a function, or None if parsing fails.","title":"parse_top_level_expr()"},{"location":"api/parser/#arx.parser.Parser.parse_unary","text":"Parse a unary expression. Returns: Type Description ExprAST The parsed unary expression, or None if parsing fails.","title":"parse_unary()"},{"location":"api/parser/#arx.parser.Parser.parse_var_expr","text":"Parse the var declaration expression. Returns: Type Description VarExprAST The parsed var expression, or None if parsing fails.","title":"parse_var_expr()"},{"location":"api/semantic/","text":"Semantic Analysis semantic Semantic analysis module. TBD","title":"Semantic Analysis"},{"location":"api/semantic/#semantic-analysis","text":"","title":"Semantic Analysis"},{"location":"api/semantic/#arx.semantic","text":"Semantic analysis module. TBD","title":"semantic"},{"location":"api/codegen/ast-output/","text":"Emit AST ast_output Set of classes and functions to emit the AST from a given source code. Classes ASTtoOutput ( CodeGenBase ) Show the AST for the given source code. Methods emit_ast ( self , ast ) Print the AST for the given source code. get_annotation ( self ) Get the current annotation and reset it. Returns The current annotation. indentation ( self ) Get the string representing the current indentation level. Returns The string representing the current indentation level. set_annotation ( self , annotation ) Set the annotation for the visitor. Parameters annotation : The annotation to set . visit_binary_expr ( self , expr ) Visit a ast.BinaryExprAST node. Parameters expr : The ast . BinaryExprAST node to visit . visit_call_expr ( self , expr ) Visit a ast.CallExprAST node. Parameters expr : The ast . CallExprAST node to visit . visit_float_expr ( self , expr ) Visit a ast.FloatExprAST node. Parameters expr : The ast . FloatExprAST node to visit . visit_for_expr ( self , expr ) Visit a ast.ForExprAST node. Parameters expr : The ast . ForExprAST node to visit . visit_function ( self , expr ) Visit a ast.FunctionAST node. Parameters expr : The ast . FunctionAST node to visit . visit_if_expr ( self , expr ) Visit an ast.IfExprAST node. Parameters expr : The ast . IfExprAST node to visit . visit_prototype ( self , expr ) Visit a ast.PrototypeAST node. Parameters expr : The ast . PrototypeAST node to visit . visit_return_expr ( self , expr ) Visit a ast.ReturnExprAST node. Parameters expr : The ast . ReturnExprAST node to visit . visit_unary_expr ( self , expr ) Visit a ast.UnaryExprAST node. Parameters expr : The ast . UnaryExprAST node to visit . visit_var_expr ( self , expr ) Visit a ast.VarExprAST node. Parameters expr : The ast . VarExprAST node to visit . visit_variable_expr ( self , expr ) Visit a ast.VariableExprAST node. Parameters expr : The ast . VariableExprAST node to visit .","title":"Emit AST"},{"location":"api/codegen/ast-output/#emit-ast","text":"","title":"Emit AST"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output","text":"Set of classes and functions to emit the AST from a given source code.","title":"ast_output"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output-classes","text":"","title":"Classes"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput","text":"Show the AST for the given source code.","title":"ASTtoOutput"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput-methods","text":"","title":"Methods"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.emit_ast","text":"Print the AST for the given source code.","title":"emit_ast()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.get_annotation","text":"Get the current annotation and reset it.","title":"get_annotation()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.get_annotation--returns","text":"The current annotation.","title":"Returns"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.indentation","text":"Get the string representing the current indentation level.","title":"indentation()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.indentation--returns","text":"The string representing the current indentation level.","title":"Returns"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.set_annotation","text":"Set the annotation for the visitor.","title":"set_annotation()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.set_annotation--parameters","text":"annotation : The annotation to set .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_binary_expr","text":"Visit a ast.BinaryExprAST node.","title":"visit_binary_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_binary_expr--parameters","text":"expr : The ast . BinaryExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_call_expr","text":"Visit a ast.CallExprAST node.","title":"visit_call_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_call_expr--parameters","text":"expr : The ast . CallExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_float_expr","text":"Visit a ast.FloatExprAST node.","title":"visit_float_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_float_expr--parameters","text":"expr : The ast . FloatExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_for_expr","text":"Visit a ast.ForExprAST node.","title":"visit_for_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_for_expr--parameters","text":"expr : The ast . ForExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_function","text":"Visit a ast.FunctionAST node.","title":"visit_function()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_function--parameters","text":"expr : The ast . FunctionAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_if_expr","text":"Visit an ast.IfExprAST node.","title":"visit_if_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_if_expr--parameters","text":"expr : The ast . IfExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_prototype","text":"Visit a ast.PrototypeAST node.","title":"visit_prototype()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_prototype--parameters","text":"expr : The ast . PrototypeAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_return_expr","text":"Visit a ast.ReturnExprAST node.","title":"visit_return_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_return_expr--parameters","text":"expr : The ast . ReturnExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_unary_expr","text":"Visit a ast.UnaryExprAST node.","title":"visit_unary_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_unary_expr--parameters","text":"expr : The ast . UnaryExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_var_expr","text":"Visit a ast.VarExprAST node.","title":"visit_var_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_var_expr--parameters","text":"expr : The ast . VarExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_variable_expr","text":"Visit a ast.VariableExprAST node.","title":"visit_variable_expr()"},{"location":"api/codegen/ast-output/#arx.codegen.ast_output.ASTtoOutput.visit_variable_expr--parameters","text":"expr : The ast . VariableExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/","text":"File Object ast_output Set of classes and functions to emit the AST from a given source code. Classes ASTtoOutput ( CodeGenBase ) Show the AST for the given source code. Methods emit_ast ( self , ast ) Print the AST for the given source code. get_annotation ( self ) Get the current annotation and reset it. Returns The current annotation. indentation ( self ) Get the string representing the current indentation level. Returns The string representing the current indentation level. set_annotation ( self , annotation ) Set the annotation for the visitor. Parameters annotation : The annotation to set . visit_binary_expr ( self , expr ) Visit a ast.BinaryExprAST node. Parameters expr : The ast . BinaryExprAST node to visit . visit_call_expr ( self , expr ) Visit a ast.CallExprAST node. Parameters expr : The ast . CallExprAST node to visit . visit_float_expr ( self , expr ) Visit a ast.FloatExprAST node. Parameters expr : The ast . FloatExprAST node to visit . visit_for_expr ( self , expr ) Visit a ast.ForExprAST node. Parameters expr : The ast . ForExprAST node to visit . visit_function ( self , expr ) Visit a ast.FunctionAST node. Parameters expr : The ast . FunctionAST node to visit . visit_if_expr ( self , expr ) Visit an ast.IfExprAST node. Parameters expr : The ast . IfExprAST node to visit . visit_prototype ( self , expr ) Visit a ast.PrototypeAST node. Parameters expr : The ast . PrototypeAST node to visit . visit_return_expr ( self , expr ) Visit a ast.ReturnExprAST node. Parameters expr : The ast . ReturnExprAST node to visit . visit_unary_expr ( self , expr ) Visit a ast.UnaryExprAST node. Parameters expr : The ast . UnaryExprAST node to visit . visit_var_expr ( self , expr ) Visit a ast.VarExprAST node. Parameters expr : The ast . VarExprAST node to visit . visit_variable_expr ( self , expr ) Visit a ast.VariableExprAST node. Parameters expr : The ast . VariableExprAST node to visit .","title":"File Object"},{"location":"api/codegen/file-object/#file-object","text":"","title":"File Object"},{"location":"api/codegen/file-object/#arx.codegen.ast_output","text":"Set of classes and functions to emit the AST from a given source code.","title":"ast_output"},{"location":"api/codegen/file-object/#arx.codegen.ast_output-classes","text":"","title":"Classes"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput","text":"Show the AST for the given source code.","title":"ASTtoOutput"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput-methods","text":"","title":"Methods"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.emit_ast","text":"Print the AST for the given source code.","title":"emit_ast()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.get_annotation","text":"Get the current annotation and reset it.","title":"get_annotation()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.get_annotation--returns","text":"The current annotation.","title":"Returns"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.indentation","text":"Get the string representing the current indentation level.","title":"indentation()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.indentation--returns","text":"The string representing the current indentation level.","title":"Returns"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.set_annotation","text":"Set the annotation for the visitor.","title":"set_annotation()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.set_annotation--parameters","text":"annotation : The annotation to set .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_binary_expr","text":"Visit a ast.BinaryExprAST node.","title":"visit_binary_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_binary_expr--parameters","text":"expr : The ast . BinaryExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_call_expr","text":"Visit a ast.CallExprAST node.","title":"visit_call_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_call_expr--parameters","text":"expr : The ast . CallExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_float_expr","text":"Visit a ast.FloatExprAST node.","title":"visit_float_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_float_expr--parameters","text":"expr : The ast . FloatExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_for_expr","text":"Visit a ast.ForExprAST node.","title":"visit_for_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_for_expr--parameters","text":"expr : The ast . ForExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_function","text":"Visit a ast.FunctionAST node.","title":"visit_function()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_function--parameters","text":"expr : The ast . FunctionAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_if_expr","text":"Visit an ast.IfExprAST node.","title":"visit_if_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_if_expr--parameters","text":"expr : The ast . IfExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_prototype","text":"Visit a ast.PrototypeAST node.","title":"visit_prototype()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_prototype--parameters","text":"expr : The ast . PrototypeAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_return_expr","text":"Visit a ast.ReturnExprAST node.","title":"visit_return_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_return_expr--parameters","text":"expr : The ast . ReturnExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_unary_expr","text":"Visit a ast.UnaryExprAST node.","title":"visit_unary_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_unary_expr--parameters","text":"expr : The ast . UnaryExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_var_expr","text":"Visit a ast.VarExprAST node.","title":"visit_var_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_var_expr--parameters","text":"expr : The ast . VarExprAST node to visit .","title":"Parameters"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_variable_expr","text":"Visit a ast.VariableExprAST node.","title":"visit_variable_expr()"},{"location":"api/codegen/file-object/#arx.codegen.ast_output.ASTtoOutput.visit_variable_expr--parameters","text":"expr : The ast . VariableExprAST node to visit .","title":"Parameters"}]}