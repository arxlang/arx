version: 1.0
groups:
  default:
    targets:
      clean:
        help: remove build artifacts, compiled files, and cache
        run: |
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name
          find . -name '__pycache__' -exec rm -fr '*.pyo' -exec rm -f {} +
          find . -name '*~' -exec rm -f {} +{} +
          rm -f .coverage
          rm -fr htmlcov/
          rm -fr .pytest_cache

  tests:
    targets:
      linter:
        help: run linter tools
        run: |
          pre-commit install
          pre-commit run --all-files

      unittest:
        help: run tests
        args:
          path:
            help: Specify the location of the tests
            type: string
            default: ""
          params:
            help: Specify parameters to be used for tests
            type: string
            default: "-vv"
        run: pytest {{ args.path }} {{ args.params }}

      smoke:
        help: run smoke tests
        dependencies:
          - target: examples.show-tokens
            args:
              examples: constant,average,fibonacci,print-star,sum
          - target: examples.show-ast
            args:
              examples: constant,average,fibonacci,print-star,sum
          # note: the development of the backend will be stopped for now
          # - target: examples.show-llvm-ir
          #   args:
          #     examples: constant,average,fibonacci,print-star,sum
          # - target: examples.emit-object
          #   args:
          #     examples: constant,average,fibonacci,print-star,sum
        run: |
          arx --help
          arx --version
      ci:
        help: run the sames tests executed on CI
        dependencies:
          - target: tests.unittest
          - target: tests.smoke
          - target: tests.linter

  examples:
    targets:
      show-tokens:
        help: Emit tokens for input file
        args:
          examples:
            help: The examples name separated by comma `,`
            type: string
            required: true
        run: |
          for name in "{{ args.examples }}".split(","):
            print(f" show tokens: {name} ".center(80, "="))
            arx --show-tokens examples/@(name).arx
      show-ast:
        help: Emit ast for input file
        args:
          examples:
            help: The examples name separated by comma `,`
            type: string
            required: true
        run: |
          for name in "{{ args.examples }}".split(","):
            print(f" show ast: {name} ".center(80, "="))
            arx --show-ast examples/@(name).arx
      show-llvm-ir:
        help: Emit ast for input file
        args:
          examples:
            help: The examples name separated by comma `,`
            type: string
            required: true
        run: |
          for name in "{{ args.examples }}".split(","):
            print(f" show llvm ir: {name} ".center(80, "="))
            arx --show-llvm-ir examples/@(name).arx
      emit-object:
        help: Emit ast for input file
        args:
          examples:
            help: The examples name separated by comma `,`
            type: string
            required: true
        run: |
          for name in "{{ args.examples }}".split(","):
            print(f" emit object: {name} ".center(80, "="))
            arx examples/@(name).arx


  docs:
    targets:
      build:
        help: build documentation
        run: |
          mkdocs build --config-file mkdocs.yaml
          echo "arxlang.org" > ./build/CNAME

      preview:
        help: preview documentation page locally
        run: mkdocs serve --watch docs --config-file mkdocs.yaml

  release:
    vars:
      app: |
        npx --yes \
          -p semantic-release \
          -p conventional-changelog-conventionalcommits \
          -p "@semantic-release/commit-analyzer" \
          -p "@semantic-release/release-notes-generator" \
          -p "@semantic-release/changelog" \
          -p "@semantic-release/exec" \
          -p "@semantic-release/github" \
          -p "@semantic-release/git" \
          -p "@google/semantic-release-replace-plugin" \
          semantic-release

    targets:
      ci:
        help: run semantic release on CI
        run: {{ vars.app }} --ci

      dry:
        help: run semantic release in dry-run mode
        run: |
          {{ vars.app }} --dry-run
