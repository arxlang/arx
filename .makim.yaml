version: 1.0
groups:
  default:
    targets:
      clean:
        help: remove build artifacts, compiled files, and cache
        run: |
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name
          find . -name '__pycache__' -exec rm -fr '*.pyo' -exec rm -f {} +
          find . -name '*~' -exec rm -f {} +{} +
          rm -f .coverage
          rm -fr htmlcov/
          rm -fr .pytest_cache

  tests:
    targets:
      lint:
        help: run linter tools
        run: |
          pre-commit install
          pre-commit run --all-files

      unittest:
        help: run tests
        run: pytest -vv

      smoke:
        help: run smoke tests
        run: |
          input_files = [
            'constant.arx',
            'average.arx',
            'fibonacci.arx',
            'print-start.arx',
            'sum.arx',
          ]
          for filename in input_files:
            arx --help
            arx --version
            arx --show-ast --input-file examples/@(filename).arx
            arx --show-llvm-ir --input-file examples/@(filename).arx
            arx --input-file examples/@(filename).arx


  docs:
    targets:
      build:
        help: build documentation
        run: mkdocs build --config-file docs/mkdocs.yaml

      preview:
        help: preview documentation page locally
        run: mkdocs serve --watch docs --config-file docs/mkdocs.yaml

  release:
    vars:
      app: |
        npx --yes \
          -p semantic-release \
          -p "@semantic-release/commit-analyzer" \
          -p "@semantic-release/release-notes-generator" \
          -p "@semantic-release/changelog" \
          -p "@semantic-release/exec" \
          -p "@semantic-release/github" \
          -p "@semantic-release/git" \
          -p "@google/semantic-release-replace-plugin" \
          semantic-release

    targets:
      ci:
        help: run semantic release on CI
        run: $(vars.app) --ci

      dry:
        help: run semantic release in dry-run mode
        run: |
          $(vars.app) --dry-run
          poetry build
          poetry publish --dry-run
